{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RustCord","text":"<p>A fast, lightweight, and feature-rich Discord bot library written in Rust.</p>"},{"location":"#overview","title":"Overview","text":"<p>RustCord is a modern Discord bot library that provides a clean, type-safe API for building Discord bots. Built with performance and reliability in mind, it offers comprehensive logging, flexible message handling, and an intuitive event system.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\ude80 Async/Await Support: Built on Tokio for high-performance async operations</li> <li>\ud83d\udcdd Comprehensive Logging: 5-level logging system with console and file output</li> <li>\ud83d\udd27 Flexible Message Handlers: Trait-based message handling system</li> <li>\ud83c\udfaf Type Safety: Leverages Rust's type system for compile-time safety</li> <li>\ud83d\udce1 WebSocket Gateway: Full Discord Gateway v10 support</li> <li>\ud83c\udf10 HTTP Client: Complete Discord REST API client</li> <li>\ud83c\udfa8 Rich Embeds: Built-in support for Discord embeds</li> <li>\u26a1 Event System: Comprehensive event handling and dispatching</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>use rustcord::{Bot, Client, MessageHandler, logger};\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    // Initialize logging\n    logger::setup_logger(logger::LogLevel::Info)?;\n\n    // Create client and bot\n    let token = std::env::var(\"DISCORD_TOKEN\")?;\n    let client = Client::new(&amp;token).await?;\n    let mut bot = Bot::new(client);\n\n    // Register message handlers\n    bot.register_message_handler(Box::new(EchoHandler));\n\n    // Start the bot\n    bot.start().await?;\n\n    Ok(())\n}\n\nstruct EchoHandler;\n\n#[async_trait::async_trait]\nimpl MessageHandler for EchoHandler {\n    async fn handle_message(&amp;self, message: &amp;rustcord::Message) -&gt; Result&lt;Option&lt;String&gt;, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; {\n        if message.content.starts_with(\"!echo \") {\n            let response = message.content.strip_prefix(\"!echo \").unwrap_or(\"\");\n            Ok(Some(response.to_string()))\n        } else {\n            Ok(None)\n        }\n    }\n}\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Add this to your <code>Cargo.toml</code>:</p> <pre><code>[dependencies]\nrustcord = \"0.1.0\"\ntokio = { version = \"1.0\", features = [\"full\"] }\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to build your first Discord bot? Check out our Getting Started Guide to learn how to set up your development environment and create your first bot.</p>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Basic Bot - Simple echo bot</li> <li>Message Handler - Custom message handling</li> <li>Embeds - Rich embed messages</li> <li>Logging - Comprehensive logging setup</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>User Guide - Learn the fundamentals</li> <li>API Reference - Complete API documentation</li> <li>Examples - Working code examples</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Issues - Bug reports and feature requests</li> <li>Discussions - Community support</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"troubleshooting/","title":"Troubleshooting RustCord","text":"<p>Common issues and solutions when using RustCord.</p>"},{"location":"troubleshooting/#bot-not-responding-to-commands","title":"Bot Not Responding to Commands","text":""},{"location":"troubleshooting/#symptoms","title":"Symptoms","text":"<ul> <li>Bot connects successfully</li> <li>Bot appears online in Discord</li> <li>Commands like <code>!ping</code> or <code>!help</code> don't trigger any response</li> <li>No message events in logs</li> </ul>"},{"location":"troubleshooting/#solution-enable-message-content-intent","title":"Solution: Enable Message Content Intent","text":"<p>This is the most common issue. Discord requires explicit permission to read message content.</p> <ol> <li>Go to Discord Developer Portal:</li> <li>Visit https://discord.com/developers/applications</li> <li> <p>Select your application</p> </li> <li> <p>Navigate to Bot section:</p> </li> <li> <p>Click \"Bot\" in the left sidebar</p> </li> <li> <p>Enable Message Content Intent:</p> </li> <li>Scroll down to \"Privileged Gateway Intents\"</li> <li>Toggle ON \"Message Content Intent\"</li> <li> <p>Save changes</p> </li> <li> <p>Update your code to use proper intents:    <pre><code>use rustcord::gateway::intents;\n\n// Include message-related intents\nlet intents = intents::GUILDS | intents::GUILD_MESSAGES | intents::MESSAGE_CONTENT;\nlet mut bot = BotBase::new(Some(intents)).await;\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#verify-in-logs","title":"Verify in Logs","text":"<p>Look for these log messages when your bot starts: <pre><code>\u2705 Message handler registered: YourHandler (Total: 1)\n\ud83d\ude80 Bot is ready!\n\ud83c\udff0 Joined guild: YourServerName\n</code></pre></p>"},{"location":"troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"troubleshooting/#invalid-token-error","title":"Invalid Token Error","text":"<pre><code>Error: HTTP error: 401 Unauthorized\n</code></pre> <p>Solutions: 1. Check your <code>.env</code> file:    <pre><code>DISCORD_TOKEN=your_actual_bot_token_here\n</code></pre> 2. No extra spaces or quotes around the token 3. Regenerate token if necessary in Discord Developer Portal</p>"},{"location":"troubleshooting/#token-not-found-error","title":"Token Not Found Error","text":"<pre><code>DISCORD_TOKEN environment variable not set\n</code></pre> <p>Solutions: 1. Create <code>.env</code> file in your project root 2. Copy from example: <code>cp .env.example .env</code> 3. Add dotenv dependency in <code>Cargo.toml</code>:    <pre><code>[dependencies]\ndotenv = \"0.15\"\n</code></pre> 4. Call dotenv in code:    <pre><code>dotenv::dotenv().ok();\n</code></pre></p>"},{"location":"troubleshooting/#permission-issues","title":"Permission Issues","text":""},{"location":"troubleshooting/#missing-access-error","title":"Missing Access Error","text":"<pre><code>Error: Missing Access\n</code></pre> <p>Solutions: 1. Re-invite your bot with proper permissions 2. Check bot role position (should be above roles it needs to manage) 3. Grant essential permissions:    - Send Messages    - Read Message History    - Read Messages</p>"},{"location":"troubleshooting/#generate-proper-invite-url","title":"Generate proper invite URL:","text":"<ol> <li>Discord Developer Portal \u2192 Your App \u2192 OAuth2 \u2192 URL Generator</li> <li>Select Scopes: <code>bot</code></li> <li>Select Permissions:</li> <li>Send Messages</li> <li>Read Message History</li> <li>Use Slash Commands (if needed)</li> <li>Use generated URL to invite bot</li> </ol>"},{"location":"troubleshooting/#connection-issues","title":"Connection Issues","text":""},{"location":"troubleshooting/#websocket-connection-failed","title":"WebSocket Connection Failed","text":"<pre><code>Error: Connection timeout\nError: WebSocket connection failed\n</code></pre> <p>Solutions: 1. Check internet connection 2. Verify Discord status: https://discordstatus.com 3. Check firewall settings 4. Try different network (mobile hotspot to test)</p>"},{"location":"troubleshooting/#gateway-connection-issues","title":"Gateway Connection Issues","text":"<pre><code>Failed to connect to Discord gateway\n</code></pre> <p>Solutions: 1. Check bot token validity 2. Verify intents configuration 3. Check rate limits (too many connection attempts)</p>"},{"location":"troubleshooting/#message-handler-issues","title":"Message Handler Issues","text":""},{"location":"troubleshooting/#handler-not-triggered","title":"Handler Not Triggered","text":"<pre><code>Handler registered but not executing\n</code></pre> <p>Check these: 1. Message Content Intent enabled 2. Bot not responding to its own messages:    <pre><code>if message.author.bot.unwrap_or(false) {\n    return Ok(());\n}\n</code></pre> 3. Correct message format (right prefix, etc.)</p>"},{"location":"troubleshooting/#multiple-responses","title":"Multiple Responses","text":"<pre><code>Bot responding multiple times to same command\n</code></pre> <p>Solutions: 1. Remove duplicate handlers 2. Check for multiple bot instances 3. Ensure handlers return early when appropriate</p>"},{"location":"troubleshooting/#logging-and-debugging","title":"Logging and Debugging","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>// In your main function\nlogger::setup_logger(\"debug\".to_string())?;\n\n// Or via environment variable\nRUST_LOG=debug cargo run\n</code></pre>"},{"location":"troubleshooting/#check-log-files","title":"Check Log Files","text":"<p>Most examples create <code>output.log</code>: <pre><code>tail -f output.log\ngrep -i \"error\" output.log\ngrep -i \"message\" output.log\n</code></pre></p>"},{"location":"troubleshooting/#common-log-messages","title":"Common Log Messages","text":"<p>Success indicators: <pre><code>\u2705 Successfully authenticated as: YourBot\n\ud83d\udd0c Connected to The Discord\n\ud83d\ude80 Bot is ready!\n\ud83c\udff0 Joined guild: YourServer\n</code></pre></p> <p>Problem indicators: <pre><code>\u274c Authentication failed\n\u274c Failed to connect to Discord gateway\nError: 401 Unauthorized\nError: Missing Access\n</code></pre></p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<pre><code>Bot using too much CPU\n</code></pre> <p>Solutions: 1. Check for infinite loops in message handlers 2. Avoid blocking operations in async handlers 3. Use appropriate log levels (avoid \"trace\" in production)</p>"},{"location":"troubleshooting/#memory-leaks","title":"Memory Leaks","text":"<pre><code>Memory usage keeps growing\n</code></pre> <p>Solutions: 1. Check for unbounded collections in handlers 2. Properly drop resources in async code 3. Use weak references where appropriate</p>"},{"location":"troubleshooting/#development-tips","title":"Development Tips","text":""},{"location":"troubleshooting/#quick-testing","title":"Quick Testing","text":"<ol> <li>Create a test server for development</li> <li>Use debug logging during development</li> <li>Test with simple commands first (<code>!ping</code>)</li> </ol>"},{"location":"troubleshooting/#code-organization","title":"Code Organization","text":"<pre><code>// Separate concerns\nstruct MyBot {\n    client: Client,\n    commands: PrefixListener,\n}\n\nimpl MyBot {\n    async fn setup(&amp;mut self) -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n        // Setup logic here\n    }\n}\n</code></pre>"},{"location":"troubleshooting/#error-handling","title":"Error Handling","text":"<pre><code>// Always handle errors gracefully\nmatch some_operation().await {\n    Ok(result) =&gt; {\n        log::info!(\"Operation successful: {:?}\", result);\n    }\n    Err(e) =&gt; {\n        log::error!(\"Operation failed: {}\", e);\n        // Don't panic, return gracefully\n        return Err(e);\n    }\n}\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still having issues:</p> <ol> <li>Check the examples in the repository</li> <li>Review the documentation </li> <li>Search existing issues on GitHub</li> <li>Create a minimal reproduction case</li> <li>Include logs and error messages when asking for help</li> </ol>"},{"location":"troubleshooting/#useful-information-to-include","title":"Useful Information to Include","text":"<p>When reporting issues: - Rust version: <code>rustc --version</code> - Operating system - Complete error messages - Minimal code that reproduces the issue - Bot permissions and intents configuration</p>"},{"location":"getting-started/first-bot/","title":"Your First Bot","text":"<p>This guide will walk you through creating your first Discord bot with RustCord, from setup to deployment.</p>"},{"location":"getting-started/first-bot/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have completed the installation guide before proceeding.</p>"},{"location":"getting-started/first-bot/#creating-a-simple-echo-bot","title":"Creating a Simple Echo Bot","text":"<p>Let's start with a basic bot that echoes messages back to users.</p>"},{"location":"getting-started/first-bot/#step-1-set-up-your-project","title":"Step 1: Set Up Your Project","text":"<pre><code>cargo new my-first-bot\ncd my-first-bot\n</code></pre>"},{"location":"getting-started/first-bot/#step-2-add-dependencies","title":"Step 2: Add Dependencies","text":"<p>Edit your <code>Cargo.toml</code>:</p> <pre><code>[package]\nname = \"my-first-bot\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nrustcord = \"0.1.0\"\ntokio = { version = \"1.40\", features = [\"full\"] }\nasync-trait = \"0.1\"\ndotenv = \"0.15\"\n</code></pre>"},{"location":"getting-started/first-bot/#step-3-create-your-bot","title":"Step 3: Create Your Bot","text":"<p>Replace the contents of <code>src/main.rs</code>:</p> <pre><code>use async_trait::async_trait;\nuse rustcord::{\n    bot::BotBase,\n    handlers::message_handler::MessageHandler,\n    message::ChannelMessage,\n    client::Client,\n    logger\n};\n\n// Simple echo handler\nstruct EchoHandler;\n\n#[async_trait]\nimpl MessageHandler for EchoHandler {\n    async fn on_message_create(\n        &amp;self, \n        message: &amp;ChannelMessage, \n        client: &amp;Client\n    ) -&gt; Result&lt;(), Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; {\n        // Don't respond to bot messages (avoid infinite loops!)\n        if message.author.bot.unwrap_or(false) {\n            return Ok(());\n        }\n\n        // Only respond to messages that start with \"!echo\"\n        if message.content.starts_with(\"!echo \") {\n            let echo_text = &amp;message.content[6..]; // Remove \"!echo \" prefix\n            client.send_text_message(&amp;message.channel_id, echo_text).await?;\n        }\n\n        Ok(())\n    }\n}\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    // Load environment variables\n    dotenv::dotenv().ok();\n\n    // Initialize logging\n    logger::setup_logger(\"info\".to_string())?;\n\n    // Get bot token\n    let token = std::env::var(\"DISCORD_TOKEN\")\n        .expect(\"DISCORD_TOKEN environment variable not set\");\n\n    println!(\"\ud83d\ude80 Starting your first Discord bot!\");\n\n    // Create and login bot\n    let mut bot = BotBase::new(None).await;\n    let user_info = bot.login(token).await;\n    println!(\"\ud83d\udd11 Logged in as: {}\", user_info.username);\n\n    // Register message handler\n    if let Some(client) = &amp;bot.client {\n        let event_dispatcher = client.get_event_dispatcher();\n        let message_handlers = event_dispatcher.get_message_handlers();\n\n        message_handlers.add_handler(EchoHandler).await;\n        println!(\"\ud83d\udcdd Echo handler registered!\");\n    }\n\n    println!(\"\ud83e\udd16 Bot is running! Try typing '!echo Hello World' in Discord\");\n\n    // Connect to Discord\n    bot.connect(bot.intents, Some(true)).await;\n\n    // Keep the bot running\n    loop {\n        tokio::time::sleep(tokio::time::Duration::from_secs(60)).await;\n    }\n}\n</code></pre>"},{"location":"getting-started/first-bot/#step-4-set-up-environment-variables","title":"Step 4: Set Up Environment Variables","text":"<p>Create a <code>.env</code> file:</p> <pre><code>DISCORD_TOKEN=your_bot_token_here\n</code></pre> <p>Remember to replace <code>your_bot_token_here</code> with your actual bot token from the Discord Developer Portal.</p>"},{"location":"getting-started/first-bot/#step-5-run-your-bot","title":"Step 5: Run Your Bot","text":"<pre><code>cargo run\n</code></pre> <p>You should see output like:</p> <pre><code>\ud83d\ude80 Starting your first Discord bot!\n\ud83d\udd11 Logged in as: YourBot#1234\n\ud83d\udcdd Echo handler registered!\n\ud83e\udd16 Bot is running! Try typing '!echo Hello World' in Discord\n</code></pre>"},{"location":"getting-started/first-bot/#step-6-test-your-bot","title":"Step 6: Test Your Bot","text":"<ol> <li>Go to your Discord server where you invited the bot</li> <li>Type: <code>!echo Hello World</code></li> <li>Your bot should respond with: <code>Hello World</code></li> </ol>"},{"location":"getting-started/first-bot/#adding-more-commands","title":"Adding More Commands","text":"<p>Let's enhance our bot with multiple commands using the prefix system:</p> <pre><code>use async_trait::async_trait;\nuse rustcord::{\n    bot::BotBase,\n    handlers::message_handler::MessageHandler,\n    prefix::{PrefixListener, PrefixCommand, HelpCommand, PingCommand},\n    message::ChannelMessage,\n    client::Client,\n    logger\n};\nuse std::sync::Arc;\n\n// Custom greeting command\nstruct GreetCommand;\n\n#[async_trait]\nimpl PrefixCommand for GreetCommand {\n    async fn execute(&amp;self, message: &amp;ChannelMessage, args: Vec&lt;&amp;str&gt;) \n        -&gt; Result&lt;Option&lt;String&gt;, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; \n    {\n        let name = if args.is_empty() {\n            &amp;message.author.name\n        } else {\n            args[0]\n        };\n\n        Ok(Some(format!(\"Hello, {}! \ud83d\udc4b Welcome to the server!\", name)))\n    }\n\n    fn description(&amp;self) -&gt; &amp;str {\n        \"Greet someone (or yourself if no name provided)\"\n    }\n}\n\n// Message handler using prefix system\nstruct PrefixHandler {\n    listener: Arc&lt;PrefixListener&gt;,\n}\n\nimpl PrefixHandler {\n    fn new(listener: Arc&lt;PrefixListener&gt;) -&gt; Self {\n        Self { listener }\n    }\n}\n\n#[async_trait]\nimpl MessageHandler for PrefixHandler {\n    async fn on_message_create(\n        &amp;self, \n        message: &amp;ChannelMessage, \n        client: &amp;Client\n    ) -&gt; Result&lt;(), Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; {\n        // Skip bot messages\n        if message.author.bot.unwrap_or(false) {\n            return Ok(());\n        }\n\n        // Handle prefix commands\n        if let Some(response) = self.listener.handle_message(message).await? {\n            client.send_text_message(&amp;message.channel_id, &amp;response).await?;\n        }\n\n        Ok(())\n    }\n}\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    dotenv::dotenv().ok();\n    logger::setup_logger(\"info\".to_string())?;\n\n    let token = std::env::var(\"DISCORD_TOKEN\")\n        .expect(\"DISCORD_TOKEN environment variable not set\");\n\n    println!(\"\ud83d\ude80 Starting enhanced Discord bot!\");\n\n    // Create bot\n    let mut bot = BotBase::new(None).await;\n    let user_info = bot.login(token).await;\n    println!(\"\ud83d\udd11 Logged in as: {}\", user_info.username);\n\n    // Set up prefix system\n    let listener = Arc::new(PrefixListener::new(\"!\"));\n\n    // Register commands\n    listener.register_command(\"help\", Box::new(HelpCommand::new(listener.clone()))).await;\n    listener.register_command(\"ping\", Box::new(PingCommand)).await;\n    listener.register_command(\"greet\", Box::new(GreetCommand)).await;\n\n    // Register message handler\n    if let Some(client) = &amp;bot.client {\n        let event_dispatcher = client.get_event_dispatcher();\n        let message_handlers = event_dispatcher.get_message_handlers();\n\n        message_handlers.add_handler(PrefixHandler::new(listener)).await;\n        println!(\"\ud83d\udcdd Prefix handler registered!\");\n    }\n\n    println!(\"\ud83e\udd16 Enhanced bot is running! Available commands:\");\n    println!(\"  \u2022 !help - Show all commands\");\n    println!(\"  \u2022 !ping - Test bot responsiveness\");\n    println!(\"  \u2022 !greet [name] - Greet someone\");\n\n    // Connect and run\n    bot.connect(bot.intents, Some(true)).await;\n\n    loop {\n        tokio::time::sleep(tokio::time::Duration::from_secs(60)).await;\n    }\n}\n</code></pre> <p>Now your bot supports: - <code>!help</code> - Lists all available commands - <code>!ping</code> - Responds with \"Pong! \ud83c\udfd3\" - <code>!greet</code> - Greets you - <code>!greet Alice</code> - Greets Alice</p>"},{"location":"getting-started/first-bot/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"getting-started/first-bot/#bot-token-invalid","title":"Bot Token Invalid","text":"<p><pre><code>Error: HTTP error: 401 Unauthorized\n</code></pre> Solution: Check your bot token in the <code>.env</code> file and ensure it's correct.</p>"},{"location":"getting-started/first-bot/#bot-not-responding","title":"Bot Not Responding","text":"<p><pre><code>Bot connects but doesn't respond to commands\n</code></pre> Solutions: 1. Ensure your bot has \"Send Messages\" permission 2. Check that Message Content Intent is enabled in Discord Developer Portal 3. Verify the bot is invited to the server</p>"},{"location":"getting-started/first-bot/#permission-denied","title":"Permission Denied","text":"<p><pre><code>Error: Missing Access\n</code></pre> Solution: Re-invite your bot with proper permissions using the OAuth2 URL generator.</p>"},{"location":"getting-started/first-bot/#next-steps","title":"Next Steps","text":"<p>Now that you have a working bot:</p> <ol> <li>Add More Commands - Follow the prefix commands guide</li> <li>Add Rich Embeds - Learn about embed messages</li> <li>Handle Events - Explore event handling</li> <li>Deploy Your Bot - Check out deployment options</li> </ol>"},{"location":"getting-started/first-bot/#complete-example-repository","title":"Complete Example Repository","text":"<p>You can find complete working examples in the examples directory of the RustCord repository.</p>"},{"location":"getting-started/first-bot/#getting-help","title":"Getting Help","text":"<ul> <li>Check the troubleshooting guide</li> <li>Browse API documentation</li> <li>Ask questions in GitHub Discussions</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing RustCord, make sure you have:</p> <ul> <li>Rust 1.70.0 or later - Install Rust</li> <li>Git - For cloning repositories</li> <li>Discord Bot Token - Create a Discord Application</li> </ul>"},{"location":"getting-started/installation/#installing-rust","title":"Installing Rust","text":"<p>If you don't have Rust installed, you can install it using rustup:</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource ~/.cargo/env\n</code></pre> <p>Verify your installation:</p> <pre><code>rustc --version\ncargo --version\n</code></pre>"},{"location":"getting-started/installation/#creating-a-new-project","title":"Creating a New Project","text":"<p>Create a new Rust project for your Discord bot:</p> <pre><code>cargo new my-discord-bot\ncd my-discord-bot\n</code></pre>"},{"location":"getting-started/installation/#adding-rustcord-dependency","title":"Adding RustCord Dependency","text":"<p>Add RustCord and required dependencies to your <code>Cargo.toml</code>:</p> <pre><code>[package]\nname = \"my-discord-bot\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nrustcord = \"0.1.0\"\ntokio = { version = \"1.40\", features = [\"full\"] }\nasync-trait = \"0.1\"\nlog = \"0.4\"\n</code></pre>"},{"location":"getting-started/installation/#setting-up-your-discord-bot","title":"Setting Up Your Discord Bot","text":""},{"location":"getting-started/installation/#1-create-a-discord-application","title":"1. Create a Discord Application","text":"<ol> <li>Go to the Discord Developer Portal</li> <li>Click \"New Application\"</li> <li>Give your application a name</li> <li>Navigate to the \"Bot\" section</li> <li>Click \"Add Bot\"</li> <li>Copy your bot token (keep this secret!)</li> </ol>"},{"location":"getting-started/installation/#2-configure-bot-permissions","title":"2. Configure Bot Permissions","text":"<p>In the \"Bot\" section of your application:</p> <ol> <li>Enable the following Privileged Gateway Intents:</li> <li>Message Content Intent (if you need to read message content)</li> <li>Server Members Intent (if you need member information)</li> <li> <p>Presence Intent (if you need presence information)</p> </li> <li> <p>In the \"OAuth2\" &gt; \"URL Generator\" section:</p> </li> <li>Select \"bot\" scope</li> <li> <p>Select required permissions:</p> <ul> <li>Send Messages</li> <li>Read Message History</li> <li>Use Slash Commands (if needed)</li> </ul> </li> <li> <p>Use the generated URL to invite your bot to a server</p> </li> </ol>"},{"location":"getting-started/installation/#3-set-up-environment-variables","title":"3. Set Up Environment Variables","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>DISCORD_TOKEN=your_bot_token_here\n</code></pre> <p>Add <code>.env</code> to your <code>.gitignore</code>:</p> <pre><code>.env\ntarget/\nCargo.lock\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>Create a simple test bot in <code>src/main.rs</code>:</p> <pre><code>use rustcord::{Bot, Client, logger};\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    // Load environment variables\n    dotenv::dotenv().ok();\n\n    // Initialize logging\n    logger::setup_logger(logger::LogLevel::Info)?;\n\n    // Get bot token\n    let token = std::env::var(\"DISCORD_TOKEN\")\n        .expect(\"DISCORD_TOKEN environment variable not set\");\n\n    // Create client and bot\n    println!(\"Creating Discord client...\");\n    let client = Client::new(&amp;token).await?;\n\n    println!(\"Starting bot...\");\n    let bot = Bot::new(client);\n    bot.start().await?;\n\n    Ok(())\n}\n</code></pre> <p>Add the <code>dotenv</code> dependency to your <code>Cargo.toml</code>:</p> <pre><code>[dependencies]\n# ... existing dependencies\ndotenv = \"0.15\"\n</code></pre> <p>Run your bot:</p> <pre><code>cargo run\n</code></pre> <p>You should see log output indicating your bot has connected to Discord!</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have RustCord installed and a basic bot running:</p> <ul> <li>Create Your First Bot - Build a simple echo bot</li> <li>Bot Configuration - Learn about bot settings</li> <li>Message Handlers - Handle user messages</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Bot token is invalid: <pre><code>Error: HTTP error: 401 Unauthorized\n</code></pre> - Verify your bot token is correct - Make sure there are no extra spaces in your <code>.env</code> file</p> <p>Permission denied: <pre><code>Error: Missing Access\n</code></pre> - Check that your bot has the required permissions in the Discord server - Verify the bot is properly invited to the server</p> <p>Connection timeout: <pre><code>Error: Connection timeout\n</code></pre> - Check your internet connection - Verify Discord's status at discordstatus.com</p>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the troubleshooting guide</li> <li>Search GitHub Issues</li> <li>Create a new issue with:</li> <li>Your Rust version (<code>rustc --version</code>)</li> <li>Your operating system</li> <li>Complete error messages</li> <li>Minimal reproduction code</li> </ol>"},{"location":"user-guide/prefix-commands/","title":"Prefix Commands","text":"<p>RustCord provides a powerful prefix-based command system that allows you to easily create and manage bot commands with specific prefixes (like <code>!</code>, <code>?</code>, or custom prefixes).</p>"},{"location":"user-guide/prefix-commands/#overview","title":"Overview","text":"<p>The prefix command system consists of:</p> <ul> <li><code>PrefixListener</code> - Manages commands for a specific prefix</li> <li><code>PrefixCommand</code> trait - Define your own commands</li> <li>Built-in commands (<code>HelpCommand</code>, <code>PingCommand</code>, <code>EchoPrefixCommand</code>)</li> <li>Integration with the existing message handler system</li> </ul>"},{"location":"user-guide/prefix-commands/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/prefix-commands/#1-create-a-prefix-listener","title":"1. Create a Prefix Listener","text":"<pre><code>use rustcord::prefix::PrefixListener;\nuse std::sync::Arc;\n\n// Create a listener for \"!\" prefix\nlet listener = Arc::new(PrefixListener::new(\"!\"));\n\n// For case-sensitive commands\nlet case_listener = Arc::new(PrefixListener::new_case_sensitive(\"!\"));\n</code></pre>"},{"location":"user-guide/prefix-commands/#2-register-built-in-commands","title":"2. Register Built-in Commands","text":"<pre><code>use rustcord::prefix::{HelpCommand, PingCommand, EchoPrefixCommand};\n\n// Register built-in commands\nlistener.register_command(\"help\", Box::new(HelpCommand::new(listener.clone()))).await;\nlistener.register_command(\"ping\", Box::new(PingCommand)).await;\nlistener.register_command(\"echo\", Box::new(EchoPrefixCommand)).await;\n</code></pre>"},{"location":"user-guide/prefix-commands/#3-create-custom-commands","title":"3. Create Custom Commands","text":"<pre><code>use async_trait::async_trait;\nuse rustcord::prefix::PrefixCommand;\nuse rustcord::message::ChannelMessage;\n\nstruct InfoCommand;\n\n#[async_trait]\nimpl PrefixCommand for InfoCommand {\n    async fn execute(&amp;self, message: &amp;ChannelMessage, _args: Vec&lt;&amp;str&gt;) \n        -&gt; Result&lt;Option&lt;String&gt;, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; \n    {\n        let response = format!(\n            \"**Server Information**\\\\n\\\\\n             Channel ID: {}\\\\n\\\\\n             Your ID: {}\",\n            message.channel_id,\n            message.author.id\n        );\n        Ok(Some(response))\n    }\n\n    fn description(&amp;self) -&gt; &amp;str {\n        \"Show information about the current server and channel\"\n    }\n\n    fn aliases(&amp;self) -&gt; Vec&lt;&amp;str&gt; {\n        vec![\"server\", \"guild\"]\n    }\n}\n\n// Register the custom command\nlistener.register_command(\"info\", Box::new(InfoCommand)).await;\n</code></pre>"},{"location":"user-guide/prefix-commands/#4-integrate-with-message-handler","title":"4. Integrate with Message Handler","text":"<pre><code>use rustcord::handlers::message_handler::MessageHandler;\n\nstruct PrefixMessageHandler {\n    listener: Arc&lt;PrefixListener&gt;,\n}\n\nimpl PrefixMessageHandler {\n    fn new(listener: Arc&lt;PrefixListener&gt;) -&gt; Self {\n        Self { listener }\n    }\n}\n\n#[async_trait]\nimpl MessageHandler for PrefixMessageHandler {\n    async fn on_message_create(&amp;self, message: &amp;ChannelMessage, client: &amp;Client) \n        -&gt; Result&lt;(), Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; \n    {\n        // Skip messages from bots\n        if message.author.bot.unwrap_or(false) {\n            return Ok(());\n        }\n\n        // Try to handle the message with the prefix listener\n        if let Some(response) = self.listener.handle_message(message).await? {\n            client.send_text_message(&amp;message.channel_id, &amp;response).await?;\n        }\n\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"user-guide/prefix-commands/#5-register-with-event-dispatcher","title":"5. Register with Event Dispatcher","text":"<pre><code>// Register with the bot's event dispatcher\nif let Some(client) = &amp;bot.client {\n    let event_dispatcher = client.get_event_dispatcher();\n    let message_handlers = event_dispatcher.get_message_handlers();\n\n    message_handlers.add_handler(PrefixMessageHandler::new(listener.clone())).await;\n}\n</code></pre>"},{"location":"user-guide/prefix-commands/#built-in-commands","title":"Built-in Commands","text":""},{"location":"user-guide/prefix-commands/#help-command","title":"Help Command","text":"<p>The <code>HelpCommand</code> automatically lists all registered commands and provides detailed help.</p> <pre><code>// Usage in Discord:\n// !help          - Lists all commands\n// !help &lt;command&gt; - Shows help for specific command\n</code></pre>"},{"location":"user-guide/prefix-commands/#ping-command","title":"Ping Command","text":"<p>A simple responsiveness test command.</p> <pre><code>// Usage: !ping\n// Response: \"Pong! \ud83c\udfd3\"\n</code></pre>"},{"location":"user-guide/prefix-commands/#echo-command","title":"Echo Command","text":"<p>Echoes back the provided text.</p> <pre><code>// Usage: !echo Hello World\n// Response: \"Hello World\"\n</code></pre>"},{"location":"user-guide/prefix-commands/#advanced-examples","title":"Advanced Examples","text":""},{"location":"user-guide/prefix-commands/#math-calculator-command","title":"Math Calculator Command","text":"<pre><code>struct MathCommand;\n\n#[async_trait]\nimpl PrefixCommand for MathCommand {\n    async fn execute(&amp;self, _message: &amp;ChannelMessage, args: Vec&lt;&amp;str&gt;) \n        -&gt; Result&lt;Option&lt;String&gt;, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; \n    {\n        if args.len() &lt; 3 {\n            return Ok(Some(\"Usage: `!math &lt;number&gt; &lt;operator&gt; &lt;number&gt;`\\\\nExample: `!math 5 + 3`\".to_string()));\n        }\n\n        let num1: f64 = match args[0].parse() {\n            Ok(n) =&gt; n,\n            Err(_) =&gt; return Ok(Some(\"Invalid first number\".to_string())),\n        };\n\n        let operator = args[1];\n\n        let num2: f64 = match args[2].parse() {\n            Ok(n) =&gt; n,\n            Err(_) =&gt; return Ok(Some(\"Invalid second number\".to_string())),\n        };\n\n        let result = match operator {\n            \"+\" =&gt; num1 + num2,\n            \"-\" =&gt; num1 - num2,\n            \"*\" | \"x\" =&gt; num1 * num2,\n            \"/\" =&gt; {\n                if num2 == 0.0 {\n                    return Ok(Some(\"Cannot divide by zero!\".to_string()));\n                }\n                num1 / num2\n            }\n            \"%\" =&gt; num1 % num2,\n            \"^\" | \"**\" =&gt; num1.powf(num2),\n            _ =&gt; return Ok(Some(\"Unknown operator. Supported: +, -, *, /, %, ^\".to_string())),\n        };\n\n        Ok(Some(format!(\"{} {} {} = {}\", num1, operator, num2, result)))\n    }\n\n    fn description(&amp;self) -&gt; &amp;str {\n        \"Perform basic math calculations\"\n    }\n\n    fn aliases(&amp;self) -&gt; Vec&lt;&amp;str&gt; {\n        vec![\"calc\", \"calculate\"]\n    }\n}\n</code></pre>"},{"location":"user-guide/prefix-commands/#user-information-command","title":"User Information Command","text":"<pre><code>struct UserCommand;\n\n#[async_trait]\nimpl PrefixCommand for UserCommand {\n    async fn execute(&amp;self, message: &amp;ChannelMessage, _args: Vec&lt;&amp;str&gt;) \n        -&gt; Result&lt;Option&lt;String&gt;, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; \n    {\n        let user = &amp;message.author;\n\n        let response = format!(\n            \"**User Information**\\\\n\\\\\n             Username: {}#{}\\\\n\\\\\n             ID: {}\\\\n\\\\\n             Bot: {}\\\\n\\\\\n             MFA Enabled: {}\",\n            user.name,\n            user.discriminator,\n            user.id,\n            user.bot.unwrap_or(false),\n            user.mfa_enabled\n        );\n\n        Ok(Some(response))\n    }\n\n    fn description(&amp;self) -&gt; &amp;str {\n        \"Show information about a user (defaults to yourself)\"\n    }\n\n    fn aliases(&amp;self) -&gt; Vec&lt;&amp;str&gt; {\n        vec![\"whois\", \"profile\"]\n    }\n}\n</code></pre>"},{"location":"user-guide/prefix-commands/#complete-example","title":"Complete Example","text":"<p>See the prefix commands example for a complete working bot that demonstrates all these features.</p>"},{"location":"user-guide/prefix-commands/#api-reference","title":"API Reference","text":""},{"location":"user-guide/prefix-commands/#prefixlistener","title":"PrefixListener","text":"<ul> <li><code>new(prefix: &amp;str)</code> - Create a new case-insensitive prefix listener</li> <li><code>new_case_sensitive(prefix: &amp;str)</code> - Create a case-sensitive prefix listener</li> <li><code>register_command(name: &amp;str, command: Box&lt;dyn PrefixCommand&gt;)</code> - Register a command</li> <li><code>unregister_command(name: &amp;str)</code> - Remove a command</li> <li><code>handle_message(message: &amp;ChannelMessage)</code> - Process a message for commands</li> <li><code>list_commands()</code> - Get all registered command names</li> <li><code>get_command_help(command_name: &amp;str)</code> - Get help for a specific command</li> <li><code>prefix()</code> - Get the prefix being used</li> </ul>"},{"location":"user-guide/prefix-commands/#prefixcommand-trait","title":"PrefixCommand Trait","text":"<ul> <li><code>execute(message: &amp;ChannelMessage, args: Vec&lt;&amp;str&gt;)</code> - Execute the command</li> <li><code>description()</code> - Get command description for help</li> <li><code>aliases()</code> - Get command aliases (optional)</li> </ul>"},{"location":"user-guide/prefix-commands/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive command names - Make commands easy to discover</li> <li>Provide good help text - Users should understand what commands do</li> <li>Handle errors gracefully - Return helpful error messages</li> <li>Use aliases for common commands - Make frequently used commands easy to type</li> <li>Skip bot messages - Always check <code>message.author.bot</code> to avoid infinite loops</li> <li>Validate arguments - Check argument count and types before processing</li> <li>Use case-insensitive commands - Unless you specifically need case sensitivity</li> </ol>"},{"location":"user-guide/prefix-commands/#error-handling","title":"Error Handling","text":"<p>Commands should return <code>Result&lt;Option&lt;String&gt;, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt;</code>:</p> <ul> <li><code>Ok(Some(response))</code> - Command executed successfully with a response</li> <li><code>Ok(None)</code> - Command executed successfully but no response needed</li> <li><code>Err(error)</code> - Command failed with an error</li> </ul> <p>The prefix system will log errors and continue processing other messages.</p>"},{"location":"user-guide/prefix-commands/#limitations","title":"Limitations","text":"<ul> <li>Commands are processed sequentially, not in parallel</li> <li>Aliases are logged but not currently stored (feature limitation)</li> <li>No built-in cooldown or rate limiting (implement in your command)</li> <li>No built-in permission system (implement in your command)</li> </ul>"},{"location":"user-guide/prefix-commands/#migration-from-simple-message-handlers","title":"Migration from Simple Message Handlers","text":"<p>If you're currently using simple message handlers with manual prefix checking:</p> <pre><code>// Old approach\nif message.content.starts_with(\"!ping\") {\n    client.send_text_message(&amp;message.channel_id, \"Pong!\").await?;\n}\n\n// New approach with prefix system\nstruct PingCommand;\n\n#[async_trait]\nimpl PrefixCommand for PingCommand {\n    async fn execute(&amp;self, _message: &amp;ChannelMessage, _args: Vec&lt;&amp;str&gt;) \n        -&gt; Result&lt;Option&lt;String&gt;, Box&lt;dyn std::error::Error + Send + Sync&gt;&gt; \n    {\n        Ok(Some(\"Pong!\".to_string()))\n    }\n\n    fn description(&amp;self) -&gt; &amp;str {\n        \"Test if the bot is responding\"\n    }\n}\n</code></pre> <p>The prefix system provides better organization, automatic help generation, and easier command management.</p>"}]}